// Generated by https://quicktype.io

#pragma once

//#include <boost/optional.hpp>
#include <map>
#include <regex>
#include <stdexcept>
#include <vector>

#include <nlohmann/json.hpp>

namespace anime {
template <class T>
inline T get_v(const nlohmann::json &j, std::string_view key) {
  if (j.find(key.data()) == j.end() || j.at(key.data()).is_null()) {
    return T{};
  } else {
    return j.at(key.data()).get<T>();
  }
}

enum AgeRating {
  AG_UNKNOWN = -1,
  PG,
  R,
};
NLOHMANN_JSON_SERIALIZE_ENUM(AgeRating, {
                                            {AG_UNKNOWN, nullptr},
                                            {PG, "PG"},
                                            {R, "R"},
                                        })

class Dimension {
public:
  Dimension() = default;
  virtual ~Dimension() = default;

private:
  int64_t width;
  int64_t height;

public:
  int64_t get_width() const { return width; }
  void set_width(int64_t value) { this->width = value; }

  int64_t get_height() const { return height; }
  void set_height(int64_t value) { this->height = value; }
};
void from_json(const nlohmann::json &j, Dimension &l) {

  l.set_width(get_v<int64_t>(j, "width"));
  l.set_height(get_v<int64_t>(j, "height"));
}

class DimensionType {
public:
  DimensionType() = default;
  virtual ~DimensionType() = default;

private:
  Dimension tiny;
  Dimension small;
  Dimension medium;
  Dimension large;

public:
  const Dimension &get_tiny() const { return tiny; }
  Dimension &get_mutable_tiny() { return tiny; }
  void set_tiny(const Dimension &value) { this->tiny = value; }

  const Dimension &get_small() const { return small; }
  Dimension &get_mutable_small() { return small; }
  void set_small(const Dimension &value) { this->small = value; }

  const Dimension &get_medium() const { return medium; }
  Dimension &get_mutable_medium() { return medium; }
  void set_medium(const Dimension &value) { this->medium = value; }

  const Dimension &get_large() const { return large; }
  Dimension &get_mutable_large() { return large; }
  void set_large(const Dimension &value) { this->large = value; }
};
void from_json(const nlohmann::json &j, DimensionType &l) {
  if (j.find("tiny") != j.end()) {
    l.set_tiny(get_v<Dimension>(j, "tiny"));
  }
  if (j.find("small") != j.end()) {
    l.set_small(get_v<Dimension>(j, "small"));
  }
  if (j.find("medium") != j.end()) {
    l.set_medium(get_v<Dimension>(j, "medium"));
  }
  if (j.find("large") != j.end()) {
    l.set_large(get_v<Dimension>(j, "large"));
  }
}

class ImageMeta {
public:
  ImageMeta() = default;
  virtual ~ImageMeta() = default;

private:
  DimensionType dimensions;

public:
  const DimensionType &get_dimensions() const { return dimensions; }
  DimensionType &get_mutable_dimensions() { return dimensions; }
  void set_dimensions(const DimensionType &value) { this->dimensions = value; }
};

void from_json(const nlohmann::json &j, ImageMeta &l) {
  l.set_dimensions(get_v<DimensionType>(j, "dimensions"));
}
class ImageLink {
public:
  ImageLink() = default;
  virtual ~ImageLink() = default;

private:
  std::string tiny;
  std::string small;
  std::string medium;
  std::string large;
  std::string original;
  ImageMeta meta;

public:
  const std::string &get_tiny() const { return tiny; }
  std::string &get_mutable_tiny() { return tiny; }
  void set_tiny(const std::string &value) { this->tiny = value; }

  const std::string &get_small() const { return small; }
  std::string &get_mutable_small() { return small; }
  void set_small(const std::string &value) { this->small = value; }

  const std::string &get_medium() const { return medium; }
  std::string &get_mutable_medium() { return medium; }
  void set_medium(const std::string &value) { this->medium = value; }

  const std::string &get_large() const { return large; }
  std::string &get_mutable_large() { return large; }
  void set_large(const std::string &value) { this->large = value; }

  const std::string &get_original() const { return original; }
  std::string &get_mutable_original() { return original; }
  void set_original(const std::string &value) { this->original = value; }

  const ImageMeta &get_meta() const { return meta; }
  ImageMeta &get_mutable_meta() { return meta; }
  void set_meta(const ImageMeta &value) { this->meta = value; }
};

void from_json(const nlohmann::json &j, ImageLink &l) {
  if (j.find("tiny") != j.end()) {
    l.set_tiny(get_v<std::string>(j, "tiny"));
  }

  if (j.find("small") != j.end()) {
    l.set_small(get_v<std::string>(j, "small"));
  }

  if (j.find("medium") != j.end()) {
    l.set_medium(get_v<std::string>(j, "medium"));
  }

  if (j.find("large") != j.end()) {
    l.set_large(get_v<std::string>(j, "large"));
  }

  if (j.find("original") != j.end()) {
    l.set_original(get_v<std::string>(j, "original"));
  }
  if (j.find("meta") != j.end()) {
    l.set_meta(get_v<ImageMeta>(j, "meta"));
  }
}

enum ShowTypeEnum {
  ST_UNKNOWN = -1,
  MOVIE,
  TV,
};
NLOHMANN_JSON_SERIALIZE_ENUM(ShowTypeEnum, {
                                               {ST_UNKNOWN, nullptr},
                                               {MOVIE, "movie"},
                                               {TV, "TV"},
                                           })

enum Status {
  S_UNKNOWN = -1,
  FINISHED,
  CURRENT,
  UPCOMING,
};
NLOHMANN_JSON_SERIALIZE_ENUM(Status, {
                                         {S_UNKNOWN, nullptr},
                                         {FINISHED, "finished"},
                                         {CURRENT, "current"},
                                         {UPCOMING, "upcoming"},
                                     })

class Titles {
public:
  Titles() = default;
  virtual ~Titles() = default;

private:
  std::string en;
  std::string en_jp;
  std::string ja_jp;
  std::string en_us;
  std::string en_ch;
  std::string zh_cn;

public:
  std::string get_en() const { return en; }
  std::string &get_mutable_en() { return en; }
  void set_en(std::string &value) { this->en = value; }

  const std::string &get_en_jp() const { return en_jp; }
  std::string &get_mutable_en_jp() { return en_jp; }
  void set_en_jp(const std::string &value) { this->en_jp = value; }

  const std::string &get_ja_jp() const { return ja_jp; }
  std::string &get_mutable_ja_jp() { return ja_jp; }
  void set_ja_jp(const std::string &value) { this->ja_jp = value; }

  std::string get_en_us() const { return en_us; }
  std::string &get_mutable_en_us() { return en_us; }
  void set_en_us(std::string &value) { this->en_us = value; }

  std::string get_en_ch() const { return en_ch; }
  std::string &get_mutable_en_ch() { return en_ch; }
  void set_en_ch(std::string &value) { this->en_ch = value; }

  std::string get_zh_cn() const { return zh_cn; }
  std::string &get_mutable_zh_cn() { return zh_cn; }
  void set_zh_cn(std::string &value) { this->zh_cn = value; }
};
void from_json(const nlohmann::json &j, Titles &title) {
  if (j.find("en") != j.end()) {
    title.set_en(get_v<std::string>(j, "en"));
  }

  if (j.find("en_jp") != j.end()) {
    title.set_en_jp(get_v<std::string>(j, "en_jp"));
  }

  if (j.find("en_us") != j.end()) {
    title.set_en_us(get_v<std::string>(j, "en_us"));
  }

  if (j.find("ja_jp") != j.end()) {
    title.set_ja_jp(get_v<std::string>(j, "ja_jp"));
  }

  if (j.find("en_ch") != j.end()) {
    title.set_en_ch(get_v<std::string>(j, "en_ch"));
  }

  if (j.find("zh_cn") != j.end()) {
    title.set_zh_cn(get_v<std::string>(j, "zh_cn"));
  }
}

class Attributes {
public:
  Attributes() = default;
  virtual ~Attributes() = default;

private:
  std::string created_at;
  std::string updated_at;
  std::string slug;
  std::string synopsis;
  int64_t cover_image_top_offset;
  Titles titles;
  std::string canonical_title;
  std::vector<std::string> abbreviated_titles;
  std::string average_rating;
  std::map<std::string, std::string> rating_frequencies;
  int64_t user_count;
  int64_t favorites_count;
  std::string start_date;
  std::string end_date;
  std::string next_release;
  int64_t popularity_rank;
  int64_t rating_rank;
  AgeRating age_rating;
  std::string age_rating_guide;
  ShowTypeEnum subtype;
  Status status;
  std::string tba;
  ImageLink poster_image;
  ImageLink cover_image;
  int64_t episode_count;
  int64_t episode_length;
  int64_t total_length;
  std::string youtube_video_id;
  ShowTypeEnum show_type;
  bool nsfw;

public:
  const std::string &get_created_at() const { return created_at; }
  std::string &get_mutable_created_at() { return created_at; }
  void set_created_at(const std::string &value) { this->created_at = value; }

  const std::string &get_updated_at() const { return updated_at; }
  std::string &get_mutable_updated_at() { return updated_at; }
  void set_updated_at(const std::string &value) { this->updated_at = value; }

  const std::string &get_slug() const { return slug; }
  std::string &get_mutable_slug() { return slug; }
  void set_slug(const std::string &value) { this->slug = value; }

  const std::string &get_synopsis() const { return synopsis; }
  std::string &get_mutable_synopsis() { return synopsis; }
  void set_synopsis(const std::string &value) { this->synopsis = value; }

  const int64_t &get_cover_image_top_offset() const {
    return cover_image_top_offset;
  }
  int64_t &get_mutable_cover_image_top_offset() {
    return cover_image_top_offset;
  }
  void set_cover_image_top_offset(const int64_t &value) {
    this->cover_image_top_offset = value;
  }

  const Titles &get_titles() const { return titles; }
  Titles &get_mutable_titles() { return titles; }
  void set_titles(const Titles &value) { this->titles = value; }

  const std::string &get_canonical_title() const { return canonical_title; }
  std::string &get_mutable_canonical_title() { return canonical_title; }
  void set_canonical_title(const std::string &value) {
    this->canonical_title = value;
  }

  const std::vector<std::string> &get_abbreviated_titles() const {
    return abbreviated_titles;
  }
  std::vector<std::string> &get_mutable_abbreviated_titles() {
    return abbreviated_titles;
  }
  void set_abbreviated_titles(const std::vector<std::string> &value) {
    this->abbreviated_titles = value;
  }

  const std::string &get_average_rating() const { return average_rating; }
  std::string &get_mutable_average_rating() { return average_rating; }
  void set_average_rating(const std::string &value) {
    this->average_rating = value;
  }

  const std::map<std::string, std::string> &get_rating_frequencies() const {
    return rating_frequencies;
  }
  std::map<std::string, std::string> &get_mutable_rating_frequencies() {
    return rating_frequencies;
  }
  void set_rating_frequencies(const std::map<std::string, std::string> &value) {
    this->rating_frequencies = value;
  }

  const int64_t &get_user_count() const { return user_count; }
  int64_t &get_mutable_user_count() { return user_count; }
  void set_user_count(const int64_t &value) { this->user_count = value; }

  const int64_t &get_favorites_count() const { return favorites_count; }
  int64_t &get_mutable_favorites_count() { return favorites_count; }
  void set_favorites_count(const int64_t &value) {
    this->favorites_count = value;
  }

  const std::string &get_start_date() const { return start_date; }
  std::string &get_mutable_start_date() { return start_date; }
  void set_start_date(const std::string &value) { this->start_date = value; }

  const std::string &get_end_date() const { return end_date; }
  std::string &get_mutable_end_date() { return end_date; }
  void set_end_date(const std::string &value) { this->end_date = value; }

  const std::string &get_next_release() const { return next_release; }
  std::string &get_mutable_next_release() { return next_release; }
  void set_next_release(const std::string &value) {
    this->next_release = value;
  }

  const int64_t &get_popularity_rank() const { return popularity_rank; }
  int64_t &get_mutable_popularity_rank() { return popularity_rank; }
  void set_popularity_rank(const int64_t &value) {
    this->popularity_rank = value;
  }

  const int64_t &get_rating_rank() const { return rating_rank; }
  int64_t &get_mutable_rating_rank() { return rating_rank; }
  void set_rating_rank(const int64_t &value) { this->rating_rank = value; }

  const AgeRating &get_age_rating() const { return age_rating; }
  AgeRating &get_mutable_age_rating() { return age_rating; }
  void set_age_rating(const AgeRating &value) { this->age_rating = value; }

  const std::string &get_age_rating_guide() const { return age_rating_guide; }
  std::string &get_mutable_age_rating_guide() { return age_rating_guide; }
  void set_age_rating_guide(const std::string &value) {
    this->age_rating_guide = value;
  }

  const ShowTypeEnum &get_subtype() const { return subtype; }
  ShowTypeEnum &get_mutable_subtype() { return subtype; }
  void set_subtype(const ShowTypeEnum &value) { this->subtype = value; }

  const Status &get_status() const { return status; }
  Status &get_mutable_status() { return status; }
  void set_status(const Status &value) { this->status = value; }

  const std::string &get_tba() const { return tba; }
  std::string &get_mutable_tba() { return tba; }
  void set_tba(const std::string &value) { this->tba = value; }

  const ImageLink &get_poster_image() const { return poster_image; }
  ImageLink &get_mutable_poster_image() { return poster_image; }
  void set_poster_image(const ImageLink &value) { this->poster_image = value; }

  ImageLink get_cover_image() const { return cover_image; }
  ImageLink get_mutable_cover_image() { return cover_image; }
  void set_cover_image(const ImageLink &value) { this->cover_image = value; }

  const int64_t &get_episode_count() const { return episode_count; }
  int64_t &get_mutable_episode_count() { return episode_count; }
  void set_episode_count(const int64_t &value) { this->episode_count = value; }

  int64_t get_episode_length() const { return episode_length; }
  void set_episode_length(int64_t value) { this->episode_length = value; }

  const int64_t &get_total_length() const { return total_length; }
  int64_t &get_mutable_total_length() { return total_length; }
  void set_total_length(const int64_t &value) { this->total_length = value; }

  const std::string &get_youtube_video_id() const { return youtube_video_id; }
  std::string &get_mutable_youtube_video_id() { return youtube_video_id; }
  void set_youtube_video_id(const std::string &value) {
    this->youtube_video_id = value;
  }

  const ShowTypeEnum &get_show_type() const { return show_type; }
  ShowTypeEnum &get_mutable_show_type() { return show_type; }
  void set_show_type(const ShowTypeEnum &value) { this->show_type = value; }

  const bool &get_nsfw() const { return nsfw; }
  bool &get_mutable_nsfw() { return nsfw; }
  void set_nsfw(const bool &value) { this->nsfw = value; }
};
void from_json(const nlohmann::json &j, Attributes &attr) {

  attr.set_created_at(get_v<std::string>(j, "createdAt"));
  attr.set_updated_at(get_v<std::string>(j, "updatedAt"));
  attr.set_slug(get_v<std::string>(j, "slug"));
  attr.set_synopsis(get_v<std::string>(j, "synopsis"));
  attr.set_cover_image_top_offset(get_v<int64_t>(j, "coverImageTopOffset"));
  attr.set_titles(get_v<Titles>(j, "titles"));
  attr.set_canonical_title(get_v<std::string>(j, "canonicalTitle"));

  attr.set_abbreviated_titles(
      get_v<std::vector<std::string>>(j, "abbreviatedTitles"));

  attr.set_average_rating(get_v<std::string>(j, "averageRating"));

  attr.set_rating_frequencies(
      get_v<std::map<std::string, std::string>>(j, "ratingFrequencies"));
  attr.set_user_count(get_v<int64_t>(j, "userCount"));
  attr.set_favorites_count(get_v<int64_t>(j, "favoritesCount"));
  attr.set_start_date(get_v<std::string>(j, "startDate"));
  attr.set_end_date(get_v<std::string>(j, "endDate"));

  attr.set_next_release(get_v<std::string>(j, "nextRelease"));

  attr.set_popularity_rank(get_v<int64_t>(j, "popularityRank"));

  attr.set_rating_rank(get_v<int64_t>(j, "ratingRank"));

  attr.set_age_rating(get_v<AgeRating>(j, "ageRating"));
  attr.set_age_rating_guide(get_v<std::string>(j, "ratingGuide"));
  attr.set_subtype(get_v<ShowTypeEnum>(j, "subtype"));
  attr.set_status(get_v<Status>(j, "status"));

  attr.set_tba(get_v<std::string>(j, "tba"));

  attr.set_poster_image(get_v<ImageLink>(j, "posterImage"));
  attr.set_cover_image(get_v<ImageLink>(j, "coverImage"));

  attr.set_episode_count(get_v<int64_t>(j, "episodeCount"));

  attr.set_episode_length(get_v<int64_t>(j, "episodeLength"));

  attr.set_total_length(get_v<int64_t>(j, "totalLength"));

  attr.set_youtube_video_id(get_v<std::string>(j, "youtubeVideoId"));

  attr.set_show_type(get_v<ShowTypeEnum>(j, "showType"));
  attr.set_nsfw(get_v<bool>(j, "nsfw"));
}

class DatumLinks {
public:
  DatumLinks() = default;
  virtual ~DatumLinks() = default;

private:
  std::string self;

public:
  const std::string &get_self() const { return self; }
  std::string &get_mutable_self() { return self; }
  void set_self(const std::string &value) { this->self = value; }
};
void from_json(const nlohmann::json &j, DatumLinks link) {
  link.set_self(get_v<std::string>(j, "self"));
}

class RelationshipLinks {
public:
  RelationshipLinks() = default;
  virtual ~RelationshipLinks() = default;

private:
  std::string self;
  std::string related;

public:
  const std::string &get_self() const { return self; }
  std::string &get_mutable_self() { return self; }
  void set_self(const std::string &value) { this->self = value; }

  const std::string &get_related() const { return related; }
  std::string &get_mutable_related() { return related; }
  void set_related(const std::string &value) { this->related = value; }
};

class Relationship {
public:
  Relationship() = default;
  virtual ~Relationship() = default;

private:
  RelationshipLinks links;

public:
  const RelationshipLinks &get_links() const { return links; }
  RelationshipLinks &get_mutable_links() { return links; }
  void set_links(const RelationshipLinks &value) { this->links = value; }
};

enum TypeEnum {
  T_UNKNOWN = -1,
  ANIME,
};
NLOHMANN_JSON_SERIALIZE_ENUM(TypeEnum, {
                                           {T_UNKNOWN, nullptr},
                                           {ANIME, "anime"},
                                       })

class Datum {
public:
  Datum() = default;
  virtual ~Datum() = default;

private:
  std::string id;
  TypeEnum type;
  DatumLinks links;
  Attributes attributes;
  std::map<std::string, Relationship> relationships;

public:
  const std::string &get_id() const { return id; }
  std::string &get_mutable_id() { return id; }
  void set_id(const std::string &value) { this->id = value; }

  const TypeEnum &get_type() const { return type; }
  TypeEnum &get_mutable_type() { return type; }
  void set_type(const TypeEnum &value) { this->type = value; }

  const DatumLinks &get_links() const { return links; }
  DatumLinks &get_mutable_links() { return links; }
  void set_links(const DatumLinks &value) { this->links = value; }

  const Attributes &get_attributes() const { return attributes; }
  Attributes &get_mutable_attributes() { return attributes; }
  void set_attributes(const Attributes &value) { this->attributes = value; }

  const std::map<std::string, Relationship> &get_relationships() const {
    return relationships;
  }
  std::map<std::string, Relationship> &get_mutable_relationships() {
    return relationships;
  }
  void set_relationships(const std::map<std::string, Relationship> &value) {
    this->relationships = value;
  }
};
void from_json(const nlohmann::json &j, Datum &data) {
  data.set_id(get_v<std::string>(j, "id"));
  data.set_type(get_v<TypeEnum>(j, "type"));
  data.set_links(get_v<DatumLinks>(j, "links"));
  data.set_attributes(get_v<Attributes>(j, "attributes"));
}

class AnimeJsonLinks {
public:
  AnimeJsonLinks() = default;
  virtual ~AnimeJsonLinks() = default;

private:
  std::string first;
  std::string next;
  std::string last;

public:
  const std::string &get_first() const { return first; }
  std::string &get_mutable_first() { return first; }
  void set_first(const std::string &value) { this->first = value; }

  const std::string &get_next() const { return next; }
  std::string &get_mutable_next() { return next; }
  void set_next(const std::string &value) { this->next = value; }

  const std::string &get_last() const { return last; }
  std::string &get_mutable_last() { return last; }
  void set_last(const std::string &value) { this->last = value; }
};
void from_json(const nlohmann::json &j, AnimeJsonLinks &ajl) {
  ajl.set_first(get_v<std::string>(j, "first"));
  ajl.set_next(get_v<std::string>(j, "next"));
  ajl.set_last(get_v<std::string>(j, "last"));
}

class AnimeJsonMeta {
public:
  AnimeJsonMeta() = default;
  virtual ~AnimeJsonMeta() = default;

private:
  int64_t count;

public:
  const int64_t &get_count() const { return count; }
  int64_t &get_mutable_count() { return count; }
  void set_count(const int64_t &value) { this->count = value; }
};
void from_json(const nlohmann::json &j, AnimeJsonMeta &ajm) {
  ajm.set_count(get_v<int64_t>(j, "count"));
}

class AnimeJson {
public:
  AnimeJson() = default;
  virtual ~AnimeJson() = default;

private:
  std::vector<Datum> data;
  AnimeJsonMeta meta;
  AnimeJsonLinks links;

public:
  const std::vector<Datum> &get_data() const { return data; }
  std::vector<Datum> &get_mutable_data() { return data; }
  void set_data(const std::vector<Datum> &value) { this->data = value; }

  const AnimeJsonMeta &get_meta() const { return meta; }
  AnimeJsonMeta &get_mutable_meta() { return meta; }
  void set_meta(const AnimeJsonMeta &value) { this->meta = value; }

  const AnimeJsonLinks &get_links() const { return links; }
  AnimeJsonLinks &get_mutable_links() { return links; }
  void set_links(const AnimeJsonLinks &value) { this->links = value; }
};
void from_json(const nlohmann::json &j, AnimeJson &aj) {
  aj.set_data(get_v<std::vector<Datum>>(j, "data"));
  aj.set_meta(get_v<AnimeJsonMeta>(j, "meta"));
  aj.set_links(get_v<AnimeJsonLinks>(j, "links"));
}

} // namespace anime
